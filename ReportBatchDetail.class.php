<?
/**
 * Heartland Portico Gateway ReportBatchDetail class.
 *
 * Class includes ReportBatchDetail functionality linked to SiteId and DeviceId supplied in the header
 * 
 * @author Michael Rice <rice.michaelt@gmail.com>
 * 
 * @copyright 2015 Michael Rice 
 * @license http://www.gnu.org/licenses/ GNU Lesser Public License (LGPL)
 *
 * @version 0.5.0
 *
 * This program is free software: you can redistribute it and/or modify  
 * it under the terms of the GNU Lesser Public License as published by  
 * the Free Software Foundation, either version 3 of the License, or  
 * (at your option) any later version.  
 *   
 * This program is distributed in the hope that it will be useful,  
 * but WITHOUT ANY WARRANTY; without even the implied warranty of  
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  
 * GNU Lesser Public License for more details.  
 *   
 * You should have received a copy of the GNU Lesser Public License  
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.  
 *
 */
##*******************************************************************************************##
/**
 * ReportBatchDetail extends portico to return information on each transaction currently associated to the specified batch. Batch ID must match Site ID and Device ID. If Batch ID isn't sent, ReportBatchDetail will return current open batch.
 *
 * @package porticoAPI
 *
*/
class ReportBatchDetail extends portico{
	/**
	 * Array of required properties.
	 * 
	 * @var array
	 */
	protected $required = [
		'ReportBatchDetail' => []
	];
	/**
	 * BatchID to return details for. (optional, defaults to current open batch)
	 * 
	 * @var string
	 */
	var $BatchId;
/*********************************************************************************************/
###############################################################################################
	/**
	 * Builds ReportBatchDetail request and submit it to portico::Transaction
	 *
	 * @return ReportBatchDetailResponse|FailureResponse formatted response from Heartland SOAP interface
	 */
	public function doTransaction()
	{
		$this->initRequest();

		$this->setTransaction([
			'ReportBatchDetail' => [
				'BatchId' => isset($this->BatchId)?$this->BatchId:''
			]
		]);
		
		return $this->Transaction();
	}
}
##*******************************************************************************************##
/**
 * Heartland Portico ReportBatchSummaryResponse class
 *
 * Response object for ReportBatchSummary
 *
 * @package porticoAPI
 *
 */
class ReportBatchDetailResponse extends porticoResponse{
	/**
	 * Summary for ReportBatchDetail response containing fields: 'BatchId','BatchTxnCnt','BatchTxnAmt'
	 * 
	 * @var array 
	 */
	var $Summary;
	/**
	 * Details for ReportBatchDetail response indexed by 'GatewayTxnId' and contains multiple arrays 
	 * of fields: 'TxnStatus','TxnDate','CardSwiped','CardType','RspCode','RspText','AuthCode','Amt','Cardholder'
	 * 
	 * @var array 
	 */
	var $Details;
	/**
	 * Check response and builds formatted object.
	 *
	 * @param array $response Request array generated by portico and sent to Heartland Portico Gateway
	 * @param string $request Complete SOAP XML from Heartland Portico Gateway
	 */
	function __construct($response, $request = '')
	{
		parent::__construct($response, $request);
		
		$this->Summary = [
			'BatchId'     => $response->{'Ver1.0'}->Transaction->ReportBatchDetail->Header->BatchId,
			'BatchTxnCnt' => $response->{'Ver1.0'}->Transaction->ReportBatchDetail->Header->BatchTxnCnt,
			'BatchTxnAmt' => $response->{'Ver1.0'}->Transaction->ReportBatchDetail->Header->BatchTxnAmt,
			'BatchOpen'   => $this->formatUTCDate($response->{'Ver1.0'}->Transaction->ReportBatchDetail->Header->OpenUtcDT),
			'BatchClose'  => $this->formatUTCDate($response->{'Ver1.0'}->Transaction->ReportBatchDetail->Header->CloseUtcDT)
		];

		foreach($response->{'Ver1.0'}->Transaction->ReportBatchDetail->Details as $d)
		{
			$this->Details[$d->GatewayTxnId] = [
				'TxnStatus'  => $d->TxnStatus,
				'TxnDate'    => $this->formatUTCDate($d->TxnUtcDT),
				'CardSwiped' => $d->CardSwiped,
				'CardType'   => $d->CardType,
				'RspCode'    => $d->RspCode,
				'RspText'    => $d->RspText,
				'AuthCode'   => $d->AuthCode,
				'Amt'        => $d->Amt,
				'Cardholder' => $d->CardHolderFirstName.' '.$d->CardHolderLastName
			];
		}
	}
}

?>