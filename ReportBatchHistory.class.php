<?
/**
 * Heartland Portico Gateway ReportBatchHistory class.
 *
 * Class includes ReportBatchHistory functionality linked to SiteId and DeviceId supplied in the header
 * 
 * @author Michael Rice <rice.michaelt@gmail.com>
 * 
 * @copyright 2015 Michael Rice 
 * @license http://www.gnu.org/licenses/ GNU Lesser Public License (LGPL)
 *
 * @version 0.5.0
 *
 * This program is free software: you can redistribute it and/or modify  
 * it under the terms of the GNU Lesser Public License as published by  
 * the Free Software Foundation, either version 3 of the License, or  
 * (at your option) any later version.  
 *   
 * This program is distributed in the hope that it will be useful,  
 * but WITHOUT ANY WARRANTY; without even the implied warranty of  
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  
 * GNU Lesser Public License for more details.  
 *   
 * You should have received a copy of the GNU Lesser Public License  
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.  
 *
 */
##*******************************************************************************************##
/**
 * ReportBatchHistory extends portico to return information about previous batches for a given Site ID and Device ID over a period of time. If no dates are provided, ReportBatchHistory will return six days prior to current date.
 *
 * @package porticoAPI
 *
*/
class ReportBatchHistory extends portico{
	/**
	 * Array of required properties.
	 * 
	 * @var array
	 */
	protected $required = [
		'ReportBatchHistory' => []
	];
	/**
	 * Start date-time used to filter the results to a particular date and time range. (date('c') formatting, optional, defaults to current day)
	 * 
	 * @var string  
	 */
	var $RptStartUtcDT;
	/**
	 * End date-time used to filter the results to a particular date and time range. (date('c') formatting, optional, defaults to current day)
	 * 
	 * @var string  
	 */
	var $RptEndUtcDT;
	/**
	 * DeviceId to report batches for. (optional, default returns batches for all devices)
	 * 
	 * @var string  
	 */
	var $ReportDeviceId;


/*********************************************************************************************/
###############################################################################################
	/**
	 * Builds ReportBatchHistory request and submit it to portico::Transaction
	 *
	 * @return ReportBatchHistoryResponse|FailureResponse formatted response from Heartland SOAP interface
	 */
	public function doTransaction()
	{
		$this->initRequest();

		$this->setTransaction([
			'ReportBatchHistory' => [
				'RptStartUtcDT'	=> isset($this->RptStartUtcDT)?$this->RptStartUtcDT:date('c', strtotime('midnight')),
				'RptEndUtcDT'	=> isset($this->RptEndUtcDT)?$this->RptEndUtcDT:date('c', strtotime('tomorrow midnight')),
				'DeviceId'		=> isset($this->ReportDeviceId)?$this->ReportDeviceId:null
			]
		]);
		
		return $this->Transaction();
	}
}
##*******************************************************************************************##
/**
 * Heartland Portico ReportBatchSummaryResponse class
 *
 * Response object for ReportBatchSummary
 *
 * @package porticoAPI
 *
 */
class ReportBatchHistoryResponse extends porticoResponse{
	/**
	 * Summary for ReportBatchHistory response containing fields: 'BatchCnt','BatchAmt'
	 * 
	 * @var array 
	 */
	var $Summary;
	/**
	 * Details for ReportBatchHistory response indexed by 'DeviceId' then BatchId' and contains multiple arrays 
	 * of fields: 'OpenDate','CloseDate','FirstTransID','LastTransID','BatchTxnCnt','BatchTxnAmt'
	 * 
	 * @var array 
	 */
	var $Details;
	/**
	 * Check response and builds formatted object.
	 *
	 * @param array $response Request array generated by portico and sent to Heartland Portico Gateway
	 * @param string $request Complete SOAP XML from Heartland Portico Gateway
	 */
	function __construct($response, $request = '')
	{
		parent::__construct($response, $request);
		
		$this->Summary = [
			'ReportStart' => $this->formatUTCDate($response->{'Ver1.0'}->Transaction->ReportBatchHistory->Header->RptStartUtcDT),
			'ReportEnd' => $this->formatUTCDate($response->{'Ver1.0'}->Transaction->ReportBatchHistory->Header->RptEndUtcDT),
			'BatchCnt' => $response->{'Ver1.0'}->Transaction->ReportBatchHistory->Header->BatchCnt,
			'BatchAmt' => $response->{'Ver1.0'}->Transaction->ReportBatchHistory->Header->BatchAmt
		];

		if(is_array($response->{'Ver1.0'}->Transaction->ReportBatchHistory->Details))
			$details   = $response->{'Ver1.0'}->Transaction->ReportBatchHistory->Details;
		else
			$details[] = $response->{'Ver1.0'}->Transaction->ReportBatchHistory->Details;

		foreach($details as $d)
		{
			$this->Details[$d->DeviceId][$d->BatchId] = [
				'OpenDate'    => $this->formatUTCDate($d->OpenUtcDT),
				'CloseDate'   => empty($d->CloseUtcDT)?'':$this->formatUTCDate($d->CloseUtcDT),
				'FirstTransID'=> $d->OpenTxnId,
				'LastTransID' => $d->CloseTxnId,
				'BatchTxnCnt' => $d->BatchTxnCnt,
				'BatchTxnAmt' => $d->BatchTxnAmt
			];
		}
	}
}

?>